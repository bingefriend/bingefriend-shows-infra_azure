# This workflow will build a Python app using Poetry, generate requirements.txt,
# and deploy it to an Azure Functions App on Linux when a new release is published.
#
# This workflow assumes you have already created the target Azure Functions app.
# For instructions see https://learn.microsoft.com/en-us/azure/azure-functions/create-first-function-vs-code-python?pivots=python-mode-configuration
#
# To configure this workflow:
# 1. Set up the following secrets in your repository:
#    - AZURE_FUNCTIONAPP_PUBLISH_PROFILE
# 2. Ensure your pyproject.toml file is correctly configured for your project.
#    You may still want to keep poetry-plugin-export in [tool.poetry.requires-plugins]
#    for local development consistency, but this workflow will install it explicitly.
# 3. Change env variables for your configuration.

name: Deploy Python project to Azure Function App on Release

# Trigger the workflow when a new release is published
on:
  release:
    types: [published]

env:
  AZURE_FUNCTIONAPP_NAME: 'tvbingefriendshows'    # set this to your function app name on Azure
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'        # set this to the path to your function app project (where pyproject.toml is located)
  PYTHON_VERSION: '3.11'                     # set this to the python version to use

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: dev # Or your target environment
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4

    - name: Setup Python ${{ env.PYTHON_VERSION }} Environment
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry and Export Plugin
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry --version # Output poetry version for debugging
        echo "Attempting to install poetry-plugin-export using 'poetry self add'..."
        poetry self add poetry-plugin-export
        echo "Listing Poetry plugins:"
        poetry plugin show # List installed plugins to verify

    - name: Generate requirements.txt and Install Dependencies
      shell: bash
      run: |
        # Navigate to the Azure Function App package path.
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        
        echo "Current directory: $(pwd)"
        echo "Listing files before poetry export:"
        ls -la

        echo "Generating requirements.txt using Poetry..."
        # This command now relies on poetry-plugin-export installed via 'poetry self add'
        poetry export -f requirements.txt --output requirements.txt --without-hashes --without dev
        
        # Verify that requirements.txt was created
        if [ ! -f requirements.txt ]; then
          echo "ERROR: requirements.txt not found after poetry export!"
          echo "Poetry version: $(poetry --version)"
          echo "Contents of pyproject.toml:"
          cat pyproject.toml || echo "pyproject.toml not found"
          echo "Poetry plugins found:"
          poetry plugin show || echo "Failed to list poetry plugins"
          echo "Listing files in current directory:"
          ls -la
          exit 1
        fi
        echo "Successfully generated requirements.txt:"
        cat requirements.txt

        # Install application dependencies into the .python_packages directory
        echo "Installing dependencies using pip from generated requirements.txt..."
        python -m pip install --upgrade pip
        pip install -r requirements.txt --target=".python_packages/lib/python${{ env.PYTHON_VERSION }}/site-packages"
        
        echo "Listing contents of .python_packages:"
        ls -R .python_packages || echo ".python_packages directory not found or empty"
        
        popd

    - name: 'Run Azure Functions Action'
      uses: Azure/functions-action@v1
      id: fa
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}
        scm-do-build-during-deployment: true
        enable-oryx-build: true
